<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>编程笔记</title>
      <link href="/2025/06/20/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/06/20/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是面向对象编程和面向过程编程"><a href="#什么是面向对象编程和面向过程编程" class="headerlink" title="什么是面向对象编程和面向过程编程"></a>什么是面向对象编程和面向过程编程</h1><p>面向对象：将程序中的实体、数据和功能抽象为单独的对象，并在这些对象之间建立联系。<br>面向过程：编程的时候把解决问题的步骤分析出来，然后用函数把这些步骤实现，在一步一步的具体步骤中再按顺序调用函数。  </p><h1 id="两者的区别和联系"><a href="#两者的区别和联系" class="headerlink" title="两者的区别和联系"></a>两者的区别和联系</h1><p>区别：举个例子，C语言是典型的面向过程编程，而C++又是典型的面向对象编程，C++是在C语言的基础上增加了类与对象等一系列的东西，而我们观察到C++比起C语言多了游戏开发的用途，那为什么呢？这就是对象的用处，游戏中的角色我们可以单独将他定义好，直接拿来用即可，比如王者荣耀，我可以将一个个的英雄定义成单独的类(包括名字、基础属性、技能数值等)，如果哪个版本时英雄过于强势我们就可以直接在类中修改他的数值。这里编程看你的思路，怎么方便怎么来，<strong>万物皆对象</strong>。以下是python的示例代码，python也是面向对象编程。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hero</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;定义英雄&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,harm</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化基础属性&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.harm = harm</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sit</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;收到命令时坐下&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>坐下&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">roll_over</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;收到命令时打滚&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>打滚&quot;</span>)</span><br><span class="line">        </span><br><span class="line">game = Hero(<span class="string">&#x27;亚瑟&#x27;</span>,<span class="number">60</span>)</span><br><span class="line">game.sit()</span><br><span class="line">game.roll_over()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;我的英雄名称是<span class="subst">&#123;game.name&#125;</span>.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;基础伤害是<span class="subst">&#123;game.harm&#125;</span>点.&quot;</span>)</span><br></pre></td></tr></table></figure><p>而对应的用C语言开发对应的功能，就需要先写好一个又一个的函数，<strong>按照步骤按照顺序</strong>依次在主函数中调用。如果出现新的功能，面向对象只需增加一个功能或对象，而面向过程则需要重新制定步骤按照新的顺序实现，但二者间没有好坏，只有适用不适用。  </p><p>联系：用面向对象来把握宏观上事物间复杂的关系，分析系统。使用面向过程在微观上进行构造。面向对象是面向过程发展后的产物。</p><h1 id="优点和缺点"><a href="#优点和缺点" class="headerlink" title="优点和缺点"></a>优点和缺点</h1><p><strong>面向过程</strong><br>优点：流程化使得编程任务明确，在开发之前基本考虑了实现方式和最终结果，具体步骤清楚，便于节点分析。效率高，面向过程强调代码的短小精悍，善于结合数据结构来开发高效率的程序。</p><p>缺点：需要深入的思考，耗费精力，代码重用性低，扩展能力差，后期维护难度比较大。  </p><p><strong>面向对象</strong><br>优点：结构清晰，程序是模块化和结构化，易扩展，代码重用率高，可继承，可覆盖，易维护。</p><p>缺点：开销大，当要修改对象内部时，对象的属性不允许外部直接存取，所以要增加许多没有其他意义、只负责读或写的行为。这会为编程工作增加负担，增加运行开销，并且使程序显得臃肿。性能低，由于面向更高的逻辑抽象层，使得面向对象在实现的时候，不得不做出性能上面的牺牲，计算时间和空间存储大小都开销很大。</p><p>写到这里我突然想到之前在网上看到的python性能低，开发软件后期维护难度大等，这不是典型的面向过程吗，但python是有着类和对象的，一番查找之后，发现了问题。</p><h1 id="动态语言和静态语言"><a href="#动态语言和静态语言" class="headerlink" title="动态语言和静态语言"></a>动态语言和静态语言</h1><p>动态语言:是运行时才确定数据类型的语言，变量在使用之前无需申明类型，通常变量的值是被赋值的那个值的类型。比如Php、Asp、JavaScript、Python、Perl等等。</p><p>静态语言:是编译时变量的数据类型就可以确定的语言，大多数静态语言要求在使用变量之前必须声明数据类型。比如Java、C、C++、C#等。</p><p>但这里我又有了疑问，python是可以强制定义类型的。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num1 = <span class="built_in">int</span>(<span class="number">123</span>)</span><br><span class="line">num2 = <span class="attribute">float</span>(<span class="number">123</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(type(num1)</span></span>,<span class="built_in">type</span>(num2))</span><br></pre></td></tr></table></figure><p>然后我又搜寻了一下。</p><h1 id="弱类型语言和强类型语言"><a href="#弱类型语言和强类型语言" class="headerlink" title="弱类型语言和强类型语言"></a>弱类型语言和强类型语言</h1><p>弱类型语言：数据类型可以被忽略的语言。一个变量可以赋不同数据类型的值。一个变量的类型是由其上下文决定的，效率更高。</p><p>强类型语言：必须强制确定数据类型的语言，一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这种数据类型,不允许隐式的类型转换。一个变量的类型是申明的时候就已经确定的，更安全。</p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>python属于强类型动态语言，假设你在开发软件时没有写明数据类型，后期维护或拓展时报错，又必须强制转换数据类型，那想一想确实头大。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第15周总结</title>
      <link href="/2025/06/15/%E7%AC%AC15%E5%91%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2025/06/15/%E7%AC%AC15%E5%91%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><strong>时间:</strong> 20250609~20250615<br><strong>事项:</strong></p><ul><li>1.高数一轮复习:<ul><li>定积分</li></ul></li><li>2.英语背单词:<ul><li>每天20个，本周110个 【总3500个，已740个，进度21%】</li></ul></li><li>3.机器人系统集成项目调试 【98%】</li><li>4.《编码》:<ul><li>读20页，page210 ~ page230 【总420页，已230页，进度54%】</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第14周总结</title>
      <link href="/2025/06/08/%E7%AC%AC14%E5%91%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2025/06/08/%E7%AC%AC14%E5%91%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><strong>时间:</strong> 20250602~20250608<br><strong>事项:</strong></p><ul><li>1.高数一轮复习:<ul><li>不定积分</li></ul></li><li>2.英语背单词:<ul><li>每天20个，本周100个 【总3500个，已630个，进度18%】</li></ul></li><li>3.机器视觉实训，项目调试 【完成】</li><li>4.《编码》:<ul><li>读18页，page192 ~ page210 【总420页，已210页，进度50%】</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第13周总结</title>
      <link href="/2025/06/01/%E7%AC%AC13%E5%91%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2025/06/01/%E7%AC%AC13%E5%91%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><strong>时间:</strong> 20250526~20250601<br><strong>事项:</strong></p><ul><li>1.高数一轮复习:<ul><li>极值与最值，曲率</li></ul></li><li>2.单片机学习:<ul><li>课程进行到第五章节中断</li><li>定时器调试</li></ul></li><li>3.英语背单词:<ul><li>每天20个，本周100个 【总3500个，已530个，进度15%】</li></ul></li><li>4.《编码》:<ul><li>读22页，page170 ~ page192 【总420页，已192页，进度45%】</li></ul></li><li>5.博途fc块编程 【完成】</li><li>6.软著 【写代码中48%】</li><li>7.机器视觉plc，镜头，传送带，触摸屏联调 【72%】</li></ul>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>导数与微分</title>
      <link href="/2025/05/31/%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/"/>
      <url>/2025/05/31/%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h1 id="导数"><a href="#导数" class="headerlink" title="导数"></a>导数</h1><p><strong>概念：</strong> $\frac {f(x)-f(x_0)}{x-x_0}&#x3D;平均速度$  </p><p>$\lim\limits_{\Delta x\rightarrow\ 0} \frac {f(x)-f(x_0)}{x-x_0}&#x3D;瞬时速度$  </p><p><strong>定义：</strong> 设函数$y&#x3D;f(x)$在点$x_0$的某个邻域内有定义，当自变量$x$在$x_0$处取得增量$\Delta x$(点$x_0+\Delta x$仍在该邻域内)时，相应地，因变量取得增量$\Delta y&#x3D;f(x_0+\Delta x)-f(x)$，如果$\Delta y$与$\Delta x$之比当$\Delta x\rightarrow\ 0$极限存在，那么称函数$y&#x3D;f(x)$在点$x_0$处可导，并称这个极限为函数$y&#x3D;f(x)$在$x_0$处的导数，记为$f’(x)$</p><p>即$f’(x)&#x3D;\frac {\Delta y} {\Delta x}&#x3D;\frac {f(x_0+\Delta x-x_0)}{\Delta x}$  </p><p>函数在一点处可导，如果函数$y&#x3D;f(x)$在开区间$I$内的每点处都可导，那么就称函数$f(x)$在开区间$I$内可导，这时，对于任一$x\in I$都对应着$f(x)$的一个确定的导数值，这样就构成了一个新的函数，这个函数叫做原来的导函数<br>导数的本质是极限是个数，导函数的本质是函数，两者的区别定义域一个是单独的数值，另一个是区间<br>极限存在的充分必要条件是左右极限都存在且相等，导数可导的充分必要条件是左导数(左极限)右导数(右极限)存在且相等</p><p><strong>导数几何意义</strong><br>函数$y&#x3D;f(x)$在点$x_0$处的导数$f’(x_0)$在几何上表示曲线$y&#x3D;f(x)$在点$M(x_0,f(x_0))$处的切线的<strong>斜率</strong>，$f’(x_0)&#x3D;tan\alpha$<br>求斜率$\rightarrow$求导$\rightarrow$求极限<br>可导一定连续，连续不一定可导</p><h1 id="函数的求导法则"><a href="#函数的求导法则" class="headerlink" title="函数的求导法则"></a>函数的求导法则</h1><p>1.反函数的导数等于直接函数导数的倒数<br>2.复合函数分别求导后再相乘</p><ul><li>幂指函数复合求导可化为$e$的指数形式</li></ul><h1 id="高阶导数"><a href="#高阶导数" class="headerlink" title="高阶导数"></a>高阶导数</h1><p>一般地，函数$y&#x3D;f(x)$的导数$y’&#x3D;f’(x)$仍是$x$的函数，$y’&#x3D;f’(x)$叫做函数$y&#x3D;f(x)$的二阶导数，记作$y’’$或$\frac{d^2y}{dx^2}$，$y’’&#x3D;(y’)’$或$\frac{d^2y}{dx^2}&#x3D;\frac{d}{dx}(\frac{d}{dx})$。$(n-1)$阶导数的导数叫做$n$阶导数<br>正弦函数的$n$阶导数：$(sinx)^n&#x3D;sin(x+n*\frac{\pi}{2})$<br>证明：</p><ul><li>$y&#x3D;sinx$</li><li>$y’&#x3D;cosx&#x3D;sin(x+1*\frac{\pi}{2})$</li><li>$y’’&#x3D;cos(x+\frac{\pi}{2})&#x3D;sin(x+\frac{\pi}{2}+\frac{\pi}{2})&#x3D;sin(x+2*\frac{\pi}{2})$</li><li>$y’’’&#x3D;cos(x+2<em>\frac{\pi}{2})&#x3D;sin(x+3</em>\frac{\pi}{2})$</li><li>$y’’’’&#x3D;cos(x+3<em>\frac{\pi}{2})&#x3D;sin(x+4</em>\frac{\pi}{2})$</li></ul><p>根据上述的规律，可总结为</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>报告联络商量</title>
      <link href="/2025/05/24/%E6%8A%A5%E5%91%8A%E8%81%94%E7%BB%9C%E5%95%86%E9%87%8F/"/>
      <url>/2025/05/24/%E6%8A%A5%E5%91%8A%E8%81%94%E7%BB%9C%E5%95%86%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是报连相"><a href="#什么是报连相" class="headerlink" title="什么是报连相"></a>什么是报连相</h1><p>报告：向委托人或上司及时反馈任务进展或结果，包括进度正常、延迟或突发问题。这是义务性沟通，能帮助团队掌握进度、提前发现风险。<br>联络：主动共享对他人可能有用的信息(如日程、行动、背景)。虽非义务，但体现对团队的“关怀”，忽略联络可能导致误解或信任缺失。<br>商量：遇到无法自行解决的问题或决定时，向上级或其他利益相关者寻求意见和建议。通过商量提升决策质量，善用此技能能借助团队力量高效解决问题。</p><h1 id="报连相的重要性"><a href="#报连相的重要性" class="headerlink" title="报连相的重要性"></a>报连相的重要性</h1><ul><li>1.提高效率<ul><li>减少团队因信息不对称导致的重复沟通，促进资源高效利用。</li></ul></li><li>2.问题早发现<ul><li>避免因隐瞒问题导致事态恶化，及时共享进展和困难，可防患于未然。</li></ul></li></ul><h1 id="正确的使用方式"><a href="#正确的使用方式" class="headerlink" title="正确的使用方式"></a>正确的使用方式</h1><p><strong>报告的正确使用方法</strong></p><ul><li><strong>核心</strong>:速度与频率<ul><li>报告是义务，需做到宁可多报，不可漏报。</li><li>内容需简洁，区分“事实”与“个人意见”。</li><li>灵活使用邮件、即使通讯工具(非紧急)或电话(紧急)。</li><li>若上司主动询问“某事的进展如何”说明报告不足。</li></ul></li></ul><p><strong>联络的正确使用方法</strong></p><ul><li><strong>核心</strong>:全面覆盖相关方+内容明确<ul><li>联络是“关怀”，需预判“谁会需要此信息”并主动共享。</li><li>使用邮件抄送或即时通讯的@功能确保信息触达。</li><li>明确联络目的:是通知、参考，还是需要对方行动。</li></ul></li></ul><p><strong>商量的正确使用方法</strong></p><ul><li><strong>核心</strong>:选对对象 +结构化表达<ul><li>优先向直属上司或导师请教，而非经验相近的同事。</li><li>若不确定咨询对象，可先问:“关于此事，我该找谁商量”。</li><li>结构化表达四要素：<br>1.主题(例:“关于A客户的提案策略建议”)。<br>2.背景(事实与现状)。<br>3.目标(希望达成的结果)。<br>4.个人想法(即使不成熟，也需提前思考)。</li></ul></li></ul><h1 id="训练要点"><a href="#训练要点" class="headerlink" title="训练要点"></a>训练要点</h1><ul><li><strong>及时执行</strong>:技巧再熟练，若延误则失去意义。  </li><li><strong>明确三者的区别</strong>·报告是义务，联络是关怀，商量是解决问题。  </li><li><strong>区分事实与观点</strong>:混淆二者可能导致决策错误。</li></ul><h1 id="培养新员工“报连相”能力时上司-前辈的言行"><a href="#培养新员工“报连相”能力时上司-前辈的言行" class="headerlink" title="培养新员工“报连相”能力时上司&#x2F;前辈的言行"></a>培养新员工“报连相”能力时上司&#x2F;前辈的言行</h1><ul><li><strong>营造易沟通的氛围</strong>:避免因忙碌或严肃让新人不敢开口。</li><li><strong>专注倾听</strong>:停下手头工作，与对方对视，体现尊重。</li><li><strong>主动跟进</strong>:新人可能因犹豫而延迟沟通，需定期询问进展。</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>报连相是团队协作的基石，尤其对新人而言，能减少失误、提升效率。</li><li>指导新人时需强调：<ul><li>报告要快、要频繁。</li><li>联络要全面、明确。</li><li>商量要选对人、结构化。</li></ul></li><li>上司需以身作则，主动创造沟通机会，避免被动等待。</li></ul><h1 id="yy硕访谈记录"><a href="#yy硕访谈记录" class="headerlink" title="yy硕访谈记录"></a>yy硕访谈记录</h1><ul><li>判断一家公司是否有前景，关键要看是否有长期业务目标。</li><li>本科生应该怎么学习机器人专业，应涉猎不同领域的知识，比如机械、电子、计算机等，拓宽自己的能力与视野。</li><li>机器人工程师分为：<ul><li>技术型工程师:专注于深入钻研现有技术。</li><li>产品型工程师:关注技术如何落地，他们需要深刻理解产品从概念到量产的全过程，对技术与产品都有深厚的认知。</li><li>研究型工程师:关注前沿技术，致力于通过论文或技术报告等形式提出创新想法。</li></ul></li><li>无论是哪种类型的工程师，沟通交流与写作能力都至关重要。无论是撰写技术文档、制定产品计划还是发表学术论文，都需要卓越的写作能力。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第12周总结</title>
      <link href="/2025/05/24/%E7%AC%AC12%E5%91%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2025/05/24/%E7%AC%AC12%E5%91%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><strong>时间:</strong> 20250519~20250525<br><strong>事项:</strong></p><ul><li>1.高数一轮复习:<ul><li>洛必达法则，泰勒公式</li></ul></li><li>2.单片机学习:<ul><li>课程进行到第四章节计数器</li><li>LCD1602调试</li></ul></li><li>3.英语背单词:<ul><li>每天20个，本周100个 【总3500个，已430个，进度11%】</li></ul></li><li>4.《编码》:<ul><li>读13页，page158 ~ page170 【总420页，已171页，进度39%】</li></ul></li><li>5.触摸屏编写程序 【完成】</li><li>6.软著 【写代码中39%】</li></ul>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>函数与极限</title>
      <link href="/2025/05/21/%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/"/>
      <url>/2025/05/21/%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/</url>
      
        <content type="html"><![CDATA[<h1 id="数列极限"><a href="#数列极限" class="headerlink" title="数列极限"></a>数列极限</h1><p><strong>定义：</strong>  设{$x_n$}为一数列，如果存在常数$\alpha$，对于任意给定的正数$\epsilon$，总存在正整数<em>N</em>，使得当<em>n</em>&gt;<em>N</em>时，不等式|$x_n$-$\alpha$|&lt;$\epsilon$ 都成立，那么就称常数$\alpha$是数列{$x_n$}的极限，或者称数列{$x_n$}收敛于$\alpha$，记作$\lim\limits_{n\rightarrow\infty}$ $x_n$&#x3D;$\alpha$</p><p><strong>复述：</strong> 有一个数列为{$x_n$}，常数$\alpha$为极限暂时先不管，任意给定的正数$\epsilon$可以看作大于0的实数R，正整数$N$为数列的项数，$n$为$N$的后一项项数，|$x_n$-$\alpha$|&lt;$\epsilon$表示的意思为数列第$n$项到极限$\alpha$的距离小于任意的正数<br>如果数列的某项到一个常数的距离小于任意的正数，那么此时这个常数就是这个数列的极限</p><p><strong>定理1(极限的唯一性)：</strong> 如果数列收敛，那么极限唯一。(用反证法即可证明)</p><p><strong>定理2(收敛数列的有界性)：</strong> 如果数列收敛，那么数列一定有界。(极限收敛，极限确定，将会被上界和下界夹在中间，反之，数列无界,则称为发散，极限不存在)</p><p><strong>定理3(收敛数列的保号性)：</strong> 如果$\lim\limits_{n\rightarrow\infty}$ $x_n$&#x3D; $\alpha$，且$\alpha$ $&gt;$ 0(或$\alpha$ $&lt;$ 0),那么存在$N$，当$n$$&gt;$$N$时，都有$x_n$ $&gt;$ 0(或$x_n&lt;0$) (数学归纳法即可推出，n$&#x3D;$ 1成立，假设n&#x3D;$\alpha$成立，那么1~$\alpha$中间的数都成立)</p><h1 id="函数极限"><a href="#函数极限" class="headerlink" title="函数极限"></a>函数极限</h1><p><strong>定义:</strong> 设函数$f(x)$在点$x_0$的某一去心邻域内有定义，如果存在常数$A$，对于任意给定的正数$\alpha$(不论它多么小)，总存在正数$\delta$，使得当$x$满足不等式$0&lt;|x-x_0|&lt;\delta$时，对应的函数值$f(x)$都满足不等式$|f(x)-A|&lt;\delta$</p><p><strong>复述：</strong> 为什么是去心邻域，因为极限只是无限逼近但不等于这个数，有定义是可取到的数值，比如$\frac{1}{0}$就没有定义，如果存在常数$A$，对于任意给定的正数$\alpha$(不论它多么小)，这句话在确定了定义域和数列极限理解是一样的，$\delta$表示的邻域半径，不等式应该这样理解$|x-x_0|&lt;\delta$，但为了严谨性才表示这样$0&lt;|x-x_0|&lt;\delta$，因为绝对值大于$0$。</p><p>$x:$ $0&lt;|x-x_0|&lt;\delta$ $\rightarrow$ $-\delta&lt;x-x_0&lt;\delta$ $\rightarrow$ $x_0-\delta&lt;x&lt;\delta+x_0$</p><p>$y:$ $|f(x)-A|&lt;\epsilon$ $\rightarrow$ $-\epsilon&lt;f(x)-A&lt;\epsilon$ $\rightarrow$ $-\epsilon+A&lt;f(x)&lt;\epsilon+A$ </p><p>$x$在$x_0$的邻域内，邻域半径为$\delta$，中间点为$x_0$，$\delta$表示接近程度，这里就可以看出单侧极限的定义，从$\delta+x_0$逼近$x_0$也就是从方向正去逼近为右极限，从$\delta-x_0$逼近$x_0$也就是从方向负去逼近为左极限，当左右极限相等时，极限才存在</p><p>函数为$y$和$x$的对应关系，当$x$在邻域内无限逼近$x_0$时，$y$也在其相应的值域内无限逼近$A$。</p><p><img src="/2025/05/21/%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90.jpg"></p><p><strong>定理1(函数极限的唯一性)：</strong> 如果$\lim\limits_{x\rightarrow\ x_0}$$f(x)$存在，那么极限唯一。</p><p><strong>定理2(函数数列的局部有界性)：</strong> 如果$\lim\limits_{x\rightarrow\ x_0}$$f(x)$ $&#x3D;A$，那么存在常数$M&gt;0$和 $\delta&gt;0$，使得当$0&lt;|x-x_0|&lt;\delta$，有$|f(x)|\leq M$。</p><p>证明：因为$\lim\limits_{x\rightarrow\ x_0}$ $f(x)$ $&#x3D;A$，所以取$\epsilon$$&#x3D;1$(也可以取别的数，因为根据定义$\epsilon$要多小有多小但不等于0)，则存在$\delta&gt;0$，当$0&lt;|x-x_0|&lt;\delta$时(确保$x$在$(x_0-\delta，\delta+x_0)$的邻域内)，有$|f(x)-A|&lt;1$,又因为$|f(x)|\leq|f(x)-A|+|A|$ (根据绝对值的性质，此时的$f(x)$为函数的极限，可以看作为$A$)，继续推$|f(x)-A|+|A|\leq|A|+1$ (因为$|f(x)-A|$是小于任意正数的)，将$|A|+1$记作$M$,所以$|f(x)|\leq M$。</p><p><strong>定理3推论：</strong> 如果在$x_0$的某去心邻域内$f(x)\geq0$或$f(x)\leq0$，而且$\lim\limits_{x\rightarrow\ x_0}$ $f(x)$ $&#x3D;A$，那么$A\geq0$或$A\leq0$。</p><h1 id="无穷大与无穷小"><a href="#无穷大与无穷小" class="headerlink" title="无穷大与无穷小"></a>无穷大与无穷小</h1><p><strong>定理1：</strong> 函数$f(x)$具有极限$A$的充分必要条件是$f(x)&#x3D;A+\alpha$，$\alpha$为无穷小。</p><p><strong>无穷大与无穷小互为倒数</strong></p><h1 id="极限存在法则-两个重要极限"><a href="#极限存在法则-两个重要极限" class="headerlink" title="极限存在法则 两个重要极限"></a>极限存在法则 两个重要极限</h1><h2 id="夹逼准则"><a href="#夹逼准则" class="headerlink" title="夹逼准则"></a>夹逼准则</h2><p>数列极限：如果数列${x_n},{y_n},{z_n}$满足以下条件：</p><p>1.从某项起，存在一个正整数$n_0$，当$n&gt;n_0$时，有$y_n\leq x_n\leq z_n$。</p><p>2.$\lim\limits_{n\rightarrow\ \infty}$ $y_n&#x3D;\alpha$，$\lim\limits_{n\rightarrow\ \infty}$ $z_n&#x3D;\alpha$，那么$x_n$的极限也只能是$\alpha$</p><p>函数极限：</p><p>1.当$x\in x_0$的去心邻域时，$g(x)\leq f(x)\leq h(x)$</p><p>2.$\lim\limits_{x\rightarrow\ \infty或者x_0}$ $g(x)&#x3D;A$，$\lim\limits_{n\rightarrow\ \infty或者x_0}$ $h(x)&#x3D;A$，那么$f(x)$的极限也只能是$A$</p><p><strong>单调有界数列必有极限</strong></p><p>单调增，有上界$\rightarrow$有极限，单调减，有下界$\rightarrow$有极限</p><h2 id="重要极限"><a href="#重要极限" class="headerlink" title="重要极限"></a>重要极限</h2><p>$\lim\limits_{x\rightarrow 0}$ $sinx\over x$ $&#x3D;1$，三个$x$的位置上的未知数相同，是什么无所谓。相应的$\lim\limits_{x\rightarrow 0}$$x\over sinx$ $&#x3D;1$</p><p>$\lim\limits_{x\rightarrow \infty}$ $\left( 1+\frac{1}{x}\right)^x&#x3D;e$</p><p><strong>变式</strong> </p><p>$\lim\limits_{x\rightarrow \infty}$ $\left( 1-\frac{1}{x}\right)^x&#x3D;\frac{1}{e}$</p><p>$\lim\limits_{x\rightarrow \infty}$ $\left( 1+x\right)^\frac{1}{x}&#x3D;e$</p><p>$\lim\limits_{x\rightarrow \infty}$ $\left( 1-x\right)^\frac{1}{x}&#x3D;\frac{1}{e}$</p><p>与第一个极限相同，三个$x$位置相同，是什么不重要</p><h1 id="无穷小的比较"><a href="#无穷小的比较" class="headerlink" title="无穷小的比较"></a>无穷小的比较</h1><p>$\lim \frac{\beta}{\alpha}&#x3D;0$，那么$\beta$是比$\alpha$<em><strong>高阶无穷小</strong></em>，记作${\beta}&#x3D;{O}(\alpha)$</p><p>$\lim \frac{\beta}{\alpha}&#x3D;1$，那么$\beta$与$\alpha$<em><strong>等价无穷小</strong></em>，记作$\alpha\sim\beta$</p><p>等价无穷小</p><p>$\beta$与$\alpha$是等价无穷小的充要条件为$\beta&#x3D;\alpha+{O}(\alpha)$</p><h1 id="函数的连续性与间断点"><a href="#函数的连续性与间断点" class="headerlink" title="函数的连续性与间断点"></a>函数的连续性与间断点</h1><h2 id="增量-变化量"><a href="#增量-变化量" class="headerlink" title="增量(变化量)"></a>增量(变化量)</h2><p>设变量$u$从它的一个初值$u_1$变到终值$u_2$，终值与初值的差$u_2-u_1$,记作$\Delta u$  (可正可负)</p><p><img src="/2025/05/21/%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/%E5%A2%9E%E9%87%8F.jpg"></p><p>$\Delta y&#x3D;f(x_0+\Delta x)-f(x_0)$</p><p><strong>定义：</strong> 设函数$y&#x3D;f(x)$在点$x_0$的邻域内有定义，如果$\lim\Delta y&#x3D;\lim\limits_{\Delta x\rightarrow0}[f(x_0+\Delta x)-f(x_0)]&#x3D;0$，那么就称函数$y&#x3D;f(x)$在点$x_0$连续</p><hr>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第11周总结</title>
      <link href="/2025/05/19/%E7%AC%AC11%E5%91%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2025/05/19/%E7%AC%AC11%E5%91%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><strong>时间:</strong> 20250512~20250518<br><strong>事项:</strong></p><ul><li>1.在GitHub.io上搭建个人博客 【完成】</li><li>2.高数一轮复习:<ul><li>导数与微分，微分中值定理</li></ul></li><li>3.单片机学习:<ul><li>课程进行到第四章节定时器</li><li>矩阵键盘，模块化编程</li></ul></li><li>4.英语背单词:<ul><li>每天20个，本周100个 【总3500个，已330个，进度10%】</li></ul></li><li>5.《编码》:<ul><li>读15页，page143 ~ page158 【总420页，已158页，进度37%】</li></ul></li><li>6.博途与触摸屏联调 【完成】</li><li>7.软著 【写代码中39%】</li></ul>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python学习之旅</title>
      <link href="/2025/05/15/python%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
      <url>/2025/05/15/python%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<p>记录一下自己的python学习之旅以及python的学习计划，我的python是起源于一次偶然的机会，那时的我还是一个渴望拥有一台属于自己的电脑的网瘾少年，又恰好到了上大学的年纪，便借着学习编程的借口要求家人买一台性能比较强的电脑，电脑买回来之后又好像失了兴趣，屏幕前的我看着自己所有拥有的顶级手机、电脑等，回想着小学时期的自己玩着小伙伴家盗版电脑…</p><p>扯的有点远了，回到主题。</p><p>本文不会具体讨论python的某个具体语法或用法，只是描述具体的方向和应该掌握的技能等。因为世界上有着无数优秀的程序员，更难得可贵的是他们愿意著书立作，并且大多数都可找到电子版。以下是我的个人学习经历，可以做个参考。</p><p>这是python的官网 <a href="https://www.python.org/downloads/">https://www.python.org/downloads/</a>，按照网上安装教程一步一步来即可，这里大多数同学所遇到的问题是cmd命令板识别不到python，问题所在是没有添加环境变量，如果你有过编程的基础，例如C语言，Java等，那么你只需按照官网的文档了解python即可 <a href="https://docs.python.org/3/">https://docs.python.org/3/</a>，如果你是一个完全的小白，需要一些教程，那么我推荐《python从入门到实践》这本书，在我的资源中即可找到此书的电子版，但如果有能力希望能够支持正版，编辑器推荐vs code <a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a>，自己去配置python环境，我并不推荐B站上的任何国内python教程，原因在于视频总是在灌溉一下技巧，并没有在最初学习时打好学习框架，完善起自己的知识树，如果你有了解过python肯定听说过这本书的大名，但这本书也并不是全能的，在此书当中你能学习到python的基础语法，以及在项目中python的使用和各种各样的第三库的使用，在学习这本书的过程中你还需要学习一下电脑的cmd命令，尽可能的折腾你的电脑，想起我们老师说过的一句话，”电脑买回来先学会重装系统，什么杀毒软件全都不需要装，我们的电脑裸奔就行了”，看完此书相信你对python有了具体的了解但感觉却意犹未尽，接下来你需要敲一敲代码和练习一些项目，如果你是电子相关专业的，那么《python极客项目编程》会非常适合你，里面会有硬件和软件相结合的项目，例如树莓派、arduino等，相信你会有所收获，但这时的你需要补充一些”做题技巧”，《python cookbook》是一本非常不错的进阶书籍，网络上的大多数人会买一本叫做《流畅的python》，我并不推荐此书.</p><p>到了这里你需要细分你的方向了，数据分析，游戏开发，web开发，爬虫等。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/05/15/hello-world/"/>
      <url>/2025/05/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
